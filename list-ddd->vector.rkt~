#lang racket

(define tst-lst

(list
 (list
  (list 1 2 3)
  (list 4 5 6))
 (list
  (list 7 8 9))) )

(map (lambda (lst) (list->vector lst)) '(( 1 2 3) (4 5 6)))

(vector-ref
 (vector-ref
  (list->vector
   (map (lambda (lst) (list->vector lst)) '(( 1 2 3) (4 5 6))))
  1)
 1)

;(define (lst->vec lst) (


(define (list-ddd->vector lst-ddd)
  (list->vector (map (lambda (lst) (list->vector (map list->vector lst))) lst-ddd)))